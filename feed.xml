<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://cswesh.github.io/</id><title>Swesh's Site</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2024-09-29T23:08:32+05:30</updated> <author> <name>Swesh</name> <uri>https://cswesh.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://cswesh.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://cswesh.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2024 Swesh </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>REST (Representational State Transfer)</title><link href="https://cswesh.github.io/rest-api-architecture/" rel="alternate" type="text/html" title="REST (Representational State Transfer)" /><published>2023-09-11T00:00:00+05:30</published> <updated>2023-09-11T00:00:00+05:30</updated> <id>https://cswesh.github.io/rest-api-architecture/</id> <content src="https://cswesh.github.io/rest-api-architecture/" /> <author> <name>Swesh</name> </author> <category term="technical" /> <summary> Key principles and concepts of REST in API architecture: REST is a widely used architectural style for designing networked applications. It uses standard HTTP methods (GET, POST, PUT, DELETE) and emphasizes stateless communication. Resources are represented as URLs, and the API uses these URLs to interact with the resources. REST APIs are simple and scalable, making them popular for web applic... </summary> </entry> <entry><title>GraphQL</title><link href="https://cswesh.github.io/graphql-in-api-architecture/" rel="alternate" type="text/html" title="GraphQL" /><published>2023-09-10T00:00:00+05:30</published> <updated>2023-09-10T00:00:00+05:30</updated> <id>https://cswesh.github.io/graphql-in-api-architecture/</id> <content src="https://cswesh.github.io/graphql-in-api-architecture/" /> <author> <name>Swesh</name> </author> <category term="technical" /> <summary> GraphQL in API architecture: GraphQL is an alternative to REST that provides more flexibility in data retrieval. Instead of multiple endpoints, GraphQL APIs have a single endpoint that allows clients to request exactly the data they need. This helps reduce over-fetching and under-fetching of data, making APIs more efficient and improving client experience. Flexible Queries: With Graph... </summary> </entry> <entry><title>SOAP (Simple Object Access Protocol)</title><link href="https://cswesh.github.io/key-aspects-of-soap/" rel="alternate" type="text/html" title="SOAP (Simple Object Access Protocol)" /><published>2023-09-09T00:00:00+05:30</published> <updated>2023-09-09T00:00:00+05:30</updated> <id>https://cswesh.github.io/key-aspects-of-soap/</id> <content src="https://cswesh.github.io/key-aspects-of-soap/" /> <author> <name>Swesh</name> </author> <category term="technical" /> <summary> Key aspects of SOAP in API architecture: SOAP is a protocol for exchanging structured information in the implementation of web services. It uses XML for message formatting and relies on other protocols such as HTTP, SMTP, and more for message negotiation. SOAP APIs tend to be more rigid and complex compared to REST or GraphQL. Message Format: SOAP messages are XML-based and follow a s... </summary> </entry> <entry><title>WebSockets Architecture</title><link href="https://cswesh.github.io/how-websockets-architecture-works/" rel="alternate" type="text/html" title="WebSockets Architecture" /><published>2023-09-08T00:00:00+05:30</published> <updated>2023-09-08T00:00:00+05:30</updated> <id>https://cswesh.github.io/how-websockets-architecture-works/</id> <content src="https://cswesh.github.io/how-websockets-architecture-works/" /> <author> <name>Swesh</name> </author> <category term="technical" /> <summary> How the WebSockets in API Architecture works: WebSocket is a protocol that provides full-duplex communication channels over a single TCP connection. It allows real-time, bidirectional communication between clients and servers, making it suitable for applications that require constant updates or notifications. Establishing a Connection: The client initiates a WebSocket connection by se... </summary> </entry> <entry><title>Webhook Architecture</title><link href="https://cswesh.github.io/how-webhook-architecture-works/" rel="alternate" type="text/html" title="Webhook Architecture" /><published>2023-09-07T00:00:00+05:30</published> <updated>2023-09-08T13:57:19+05:30</updated> <id>https://cswesh.github.io/how-webhook-architecture-works/</id> <content src="https://cswesh.github.io/how-webhook-architecture-works/" /> <author> <name>Swesh</name> </author> <category term="technical" /> <summary> How the webhook architecture works: Webhooks are a design pattern used in API architecture to enable real-time communication and data synchronization between different systems or services. Unlike traditional APIs where a client makes requests to a server to retrieve or send data, with webhooks, the server initiates communication by sending data to a predefined endpoint (URL) on the client’s si... </summary> </entry> </feed>
