[ { "title": "REST (Representational State Transfer)", "url": "/rest-api-architecture/", "categories": "technical", "tags": "API, Architecture, API Architecture, 2023 Top API Architecture, API methodologies, REST, Webhooks, Graphql, SOAP, Websocket, gRPC, MQTT, AMQP, what are API Architectures, API Styles, different types of api architectures, quick revision of apis, key principles and concepts of REST in API architecture, interview preperations", "date": "2023-09-11 00:00:00 +0530", "snippet": "Key principles and concepts of REST in API architecture:REST is a widely used architectural style for designing networked applications. It uses standard HTTP methods (GET, POST, PUT, DELETE) and em...", "content": "Key principles and concepts of REST in API architecture:REST is a widely used architectural style for designing networked applications. It uses standard HTTP methods (GET, POST, PUT, DELETE) and emphasizes stateless communication. Resources are represented as URLs, and the API uses these URLs to interact with the resources. REST APIs are simple and scalable, making them popular for web applications. Client-Server Architecture:REST separates the client and server components, allowing them to evolve independently. Clients make requests to servers, which process those requests and send back responses. Statelessness:Each client request to the server must contain all the necessary information for the server to fulfill the request. The server doesn’t store any client state between requests, which simplifies scalability and improves reliability. Cacheability:Responses from the server can be cached on the client side to improve performance. Servers can include caching-related headers in responses to control how clients cache the data. Uniform Interface:REST APIs have a uniform and consistent interface that is made up of four key constraints: Resource Identification: Resources are uniquely identified by URIs (Uniform Resource Identifiers). Resource Manipulation through Representations: Clients interact with resources using representations (such as JSON or XML). These representations contain the data and state of the resource. Self-Descriptive Messages: Each message (request or response) includes enough information for the recipient to understand how to process it. Hypermedia as the Engine of Application State (HATEOAS): Responses from the server include links to related resources, guiding clients on how to navigate the API. Layered System:REST allows for the use of intermediaries, such as proxy servers, load balancers, and gateways, between clients and servers. These intermediaries can provide additional features without affecting the overall system architecture. Code on Demand (optional):Servers can optionally provide executable code (such as JavaScript) to clients. This constraint is rarely used in practice.RESTful APIs are typically implemented using HTTP methods (GET, POST, PUT, DELETE, etc.) and resources represented as URLs. Clients use these methods to perform operations on resources, and servers respond with appropriate status codes and data representations.It’s important to note that while REST provides a set of architectural principles and constraints, the term “RESTful” is often used more loosely to describe APIs that follow these principles to varying degrees. Many APIs claim to be RESTful but might not strictly adhere to all the constraints.Overall, REST has become a foundational architectural style for building APIs due to its simplicity, scalability, and wide adoption across various domains.Some explanations are AI Generated, Proof-read &amp; Verified" }, { "title": "GraphQL", "url": "/graphql-in-api-architecture/", "categories": "technical", "tags": "API, Architecture, API Architecture, 2023 Top API Architecture, API methodologies, REST, Webhooks, Graphql, SOAP, Websocket, gRPC, MQTT, AMQP, what are API Architectures, API Styles, different types of api architectures, quick revision of apis, graphql in API architecture, interview preperations", "date": "2023-09-10 00:00:00 +0530", "snippet": "GraphQL in API architecture:GraphQL is an alternative to REST that provides more flexibility in data retrieval. Instead of multiple endpoints, GraphQL APIs have a single endpoint that allows client...", "content": "GraphQL in API architecture:GraphQL is an alternative to REST that provides more flexibility in data retrieval. Instead of multiple endpoints, GraphQL APIs have a single endpoint that allows clients to request exactly the data they need. This helps reduce over-fetching and under-fetching of data, making APIs more efficient and improving client experience. Flexible Queries:With GraphQL, clients can request only the specific fields and data they need, avoiding the over-fetching problem commonly seen in REST APIs. This ability to customize queries is particularly valuable in scenarios where bandwidth is limited or where optimizing data transfer is important. Single Endpoint:Unlike REST APIs, which often have multiple endpoints for different resources, GraphQL APIs typically have a single endpoint for all interactions. This reduces the need to maintain a large number of endpoints and simplifies the API structure. Strongly Typed Schema:GraphQL APIs are defined using a schema that specifies the types of data that can be queried, along with their relationships and available operations. The schema serves as a contract between the client and server. Introspection and Documentation:GraphQL schemas can be introspected, meaning clients can query the schema itself to discover available types, fields, and operations. This feature makes it easy to generate interactive documentation for the API. Real-time and Batch Queries:GraphQL supports real-time updates using subscriptions, allowing clients to receive updates when specific data changes. It also enables batched queries, reducing the number of round-trips between the client and server. Complex Data Fetching:GraphQL can efficiently handle complex data fetching scenarios, aggregating data from multiple sources or databases into a single response. Client Control:GraphQL shifts control over data fetching from the server to the client. This empowers front-end developers to request exactly the data they need for their views, reducing the need for back-end changes when UI requirements evolve. GraphQL is often used within various architectural styles and scenarios: Microservices: GraphQL can aggregate data from multiple microservices into a single response, reducing the need for multiple API calls. Single-Page Applications: GraphQL is well-suited for powering dynamic and interactive single-page applications (SPAs) where optimizing data transfer is important. Mobile Applications: GraphQL’s flexibility is valuable in mobile app development, where data consumption and performance are critical. Custom Workflows: GraphQL’s ability to define custom queries makes it suitable for scenarios where clients need to perform complex, ad hoc data queries. Overall, GraphQL offers a powerful and efficient way to design APIs that provide flexibility, reduce data transfer overhead, and enable interactive and dynamic client-server communication. It’s important to note that GraphQL is not a replacement for REST but rather an alternative approach to building APIs with its own strengths and considerations.Some explanations are AI Generated, Proof-read &amp; Verified" }, { "title": "SOAP (Simple Object Access Protocol)", "url": "/key-aspects-of-soap/", "categories": "technical", "tags": "API, Architecture, API Architecture, 2023 Top API Architecture, API methodologies, REST, Webhooks, Graphql, SOAP, Websocket, gRPC, MQTT, AMQP, what are API Architectures, API Styles, different types of api architectures, quick revision of apis, key aspects of soap architecture, interview preperations", "date": "2023-09-09 00:00:00 +0530", "snippet": "Key aspects of SOAP in API architecture:SOAP is a protocol for exchanging structured information in the implementation of web services. It uses XML for message formatting and relies on other protoc...", "content": "Key aspects of SOAP in API architecture:SOAP is a protocol for exchanging structured information in the implementation of web services. It uses XML for message formatting and relies on other protocols such as HTTP, SMTP, and more for message negotiation. SOAP APIs tend to be more rigid and complex compared to REST or GraphQL. Message Format:SOAP messages are XML-based and follow a standardized format. They consist of an envelope that encapsulates the message content, headers for additional information, and a body that contains the actual data. Protocol Independence:SOAP is designed to work over different transport protocols, including HTTP, SMTP, FTP, and more. This makes it versatile and suitable for a wide range of communication scenarios. Service Definition:A SOAP-based API is defined using a Web Services Description Language (WSDL) document. The WSDL describes the available operations, input and output parameters, and the structure of the SOAP messages. Remote Procedure Call (RPC):SOAP allows clients to invoke remote procedures or methods exposed by a server. Clients send SOAP messages with requests, and servers respond with SOAP messages containing the results. Security and Reliability Features:SOAP provides various security mechanisms, including encryption and authentication, to ensure the confidentiality and integrity of the messages. It also offers built-in error handling and reliability features. Interoperability and Standards:SOAP was designed with a focus on interoperability, allowing software components written in different programming languages and running on different platforms to communicate seamlessly. SOAP was one of the earliest protocols used for web services, and it was widely adopted in the early days of web services development. However, over time, REST and other lightweight protocols gained popularity due to their simplicity and ease of use. SOAP’s XML-based nature and complexity have led to some challenges, including larger message sizes and overhead compared to other protocols.While SOAP is still used in certain enterprise scenarios, many modern API architectures tend to favor simpler and more lightweight protocols like REST or gRPC for building web services and APIs. However, it’s important to note that SOAP can still play a role in specific scenarios where features like security, reliability, and strict contract definition are priorities.Some explanations are AI Generated, Proof-read &amp; Verified" }, { "title": "WebSockets Architecture", "url": "/how-websockets-architecture-works/", "categories": "technical", "tags": "API, Architecture, API Architecture, 2023 Top API Architecture, API methodologies, REST, Webhooks, Graphql, SOAP, Websocket, gRPC, MQTT, AMQP, what are API Architectures, API Styles, different types of api architectures, quick revision of apis, how websockets architecture works, interview preperations", "date": "2023-09-08 00:00:00 +0530", "snippet": "How the WebSockets in API Architecture works:WebSocket is a protocol that provides full-duplex communication channels over a single TCP connection. It allows real-time, bidirectional communication ...", "content": "How the WebSockets in API Architecture works:WebSocket is a protocol that provides full-duplex communication channels over a single TCP connection. It allows real-time, bidirectional communication between clients and servers, making it suitable for applications that require constant updates or notifications. Establishing a Connection:The client initiates a WebSocket connection by sending a WebSocket handshake request to the server. If the server supports WebSockets, it responds with a WebSocket handshake response, and the connection is established. Full-Duplex Communication:Once the WebSocket connection is established, both the client and server can send and receive messages independently, without waiting for a request-response cycle. This enables real-time data exchange. Persistent Connection:Unlike traditional HTTP connections, which are short-lived, WebSockets maintain a persistent connection as long as both the client and server want to communicate. This reduces the overhead of establishing new connections for each message. Low Latency and Overhead:WebSockets have lower latency compared to HTTP because there is no need to repeatedly open and close connections for each message. The protocol has less overhead, making it suitable for real-time applications. Supported Message Types:WebSockets support sending various types of messages, including text and binary data. Clients and servers can exchange messages in both directions. WebSockets are often used within different architectural styles and scenarios: Real-Time Applications: WebSockets are commonly used in real-time applications such as chat applications, online gaming, live notifications, collaborative editing, and financial trading platforms. Event-Driven Architectures: WebSockets enable real-time event notification and communication between components or microservices in an event-driven architecture. Interactive Web Applications: Web applications can use WebSockets to provide interactive and dynamic user experiences without the need for frequent page reloads. IoT (Internet of Things): WebSockets are suitable for transmitting real-time data from IoT devices to a central server or other devices. While WebSockets provide benefits for real-time communication, they have some considerations: Infrastructure Support: Both the client and server need to support WebSockets. Some older networks or proxy configurations might not fully support the protocol. Connection Management: Maintaining a persistent connection requires resources. Servers need to manage a potentially large number of concurrent connections. Error Handling: Proper error handling and reconnection strategies are important to ensure the stability of WebSocket-based applications. Overall, WebSockets are a valuable tool for enabling efficient and real-time communication between clients and servers in various architectural scenarios, contributing to dynamic and interactive user experiences.Some explanations are AI Generated, Proof-read &amp; Verified" }, { "title": "Webhook Architecture", "url": "/how-webhook-architecture-works/", "categories": "technical", "tags": "API, Architecture, API Architecture, 2023 Top API Architecture, API methodologies, REST, Webhooks, Graphql, SOAP, Websocket, gRPC, MQTT, AMQP, what are API Architectures, API Styles, different types of api architectures, quick revision of apis, how webhook architecture works, interview preperations", "date": "2023-09-07 00:00:00 +0530", "snippet": "How the webhook architecture works:Webhooks are a design pattern used in API architecture to enable real-time communication and data synchronization between different systems or services. Unlike tr...", "content": "How the webhook architecture works:Webhooks are a design pattern used in API architecture to enable real-time communication and data synchronization between different systems or services. Unlike traditional APIs where a client makes requests to a server to retrieve or send data, with webhooks, the server initiates communication by sending data to a predefined endpoint (URL) on the client’s side when a specific event occurs. This allows the client to react and process the data in real-time. Setting Up a Webhook:The client (receiver) provides a URL endpoint to the server (sender) that will be used to receive webhook notifications. This URL is typically exposed by the client and can be thought of as a callback URL. Event Triggering:The server generates or identifies an event that requires notifying the client. This event could be anything of significance, such as a new order being placed, a user signing up, or a data update. Sending Webhook Notification:When the event occurs, the server sends an HTTP POST request to the URL endpoint provided by the client. This request contains relevant data related to the event, often in a structured format like JSON or XML. Client Processing:The client receives the webhook notification at the provided endpoint. It processes the incoming data and performs any required actions based on the event. This could include updating its own database, triggering further processes, sending notifications, or other custom logic. Webhooks are commonly used for various purposes, including: Real-time Data Synchronization: Webhooks are useful for keeping data in sync between different systems without the need for constant polling by the client. Event Notification: Webhooks can be used to notify clients of important events, such as a payment confirmation, a new comment on a post, or a user login. Automation and Integration: Webhooks allow different services to integrate seamlessly by triggering actions in response to events in other services. Custom Workflows: Clients can define custom workflows based on incoming webhook data, enabling them to create complex automation scenarios. Webhooks provide a way for systems to communicate in a decentralized and event-driven manner, allowing for real-time interactions and reducing the need for continuous client polling. However, it’s important to consider security, error handling, and reliability when implementing webhooks to ensure that the communication is secure and the system can gracefully handle any issues that may arise during the process.Some explanations are AI Generated, Proof-read &amp; Verified" }, { "title": "gRPC (Remote Procedure Call)", "url": "/api-architecture-of-grpc/", "categories": "technical", "tags": "API, Architecture, API Architecture, 2023 Top API Architecture, API methodologies, REST, Webhooks, Graphql, SOAP, Websocket, gRPC, MQTT, AMQP, what are API Architectures, API Styles, different types of api architectures, quick revision of apis, Remote Procedure Call, XML-RPC, JSON-RPC, interview preperations", "date": "2023-09-06 00:00:00 +0530", "snippet": "API Architecture of gRPC (Remote Procedure Call)RPC APIs allow programs to execute functions or procedures on a remote server as if they were local. Examples include gRPC and XML-RPC. gRPC, for ins...", "content": "API Architecture of gRPC (Remote Procedure Call)RPC APIs allow programs to execute functions or procedures on a remote server as if they were local. Examples include gRPC and XML-RPC. gRPC, for instance, uses protocol buffers for data serialization and HTTP/2 for transport, making it efficient and suitable for high-performance applications. And JSON-RPC, which uses JSON. Remote Procedure Calls:gRPC enables remote procedure calls (RPC) between different components or services, allowing them to invoke methods and exchange data as if they were local function calls. This simplifies the way applications communicate across network boundaries. Protocol Buffers:gRPC uses Protocol Buffers (protobuf) as the default interface definition language to define the service contract and message structures. Protocol Buffers provide a compact, efficient, and language-independent way to serialize structured data. HTTP/2 Protocol:gRPC uses HTTP/2 as the underlying transport protocol. This enables features like multiplexing, header compression, and bidirectional streaming, resulting in reduced latency and improved efficiency compared to traditional HTTP/1.x APIs. Supported Language Bindings:gRPC provides official language bindings for a wide range of programming languages, including but not limited to C++, Java, Python, Go, Ruby, C#, and JavaScript. Code Generation:gRPC generates client and server code from the service definition written in Protocol Buffers. This code generation simplifies the development process by handling many low-level details of communication. Streaming Support:gRPC supports both unary RPC (request-response) and streaming RPC, including server streaming (client sends a single request, server responds with a stream) and bidirectional streaming (both client and server exchange streams of messages). Error Handling and Metadata:gRPC provides a standardized way to handle errors and attach metadata to requests and responses, making it easier to include additional context and information. Security and Authentication:gRPC supports various authentication and security mechanisms, including TLS/SSL encryption and authentication using tokens, certificates, or other methods. gRPC is often used in various architectural styles, such as microservices, where services need to communicate efficiently and asynchronously. It can also be used in event-driven architectures and scenarios where real-time communication and efficient data exchange are important.Overall, gRPC is a powerful technology that provides a modern and efficient way to design and implement APIs for distributed systems, making it a popular choice for building high-performance and scalable applications.Some explanations are AI Generated, Proof-read &amp; Verified" }, { "title": "MQTT (Message Queing Telemetry Transport)", "url": "/mqtt-api-architecture/", "categories": "technical", "tags": "API, Architecture, API Architecture, 2023 Top API Architecture, API methodologies, REST, Webhooks, Graphql, SOAP, Websocket, gRPC, MQTT, AMQP, what are API Architectures, API Styles, different types of api architectures, quick revision of apis, Message Queing Telemetry Transport, interview preperations", "date": "2023-09-05 12:00:00 +0530", "snippet": "Overview of MQTT API Architecture (Message Queing Telemetry Transport)MQTT (Message Queuing Telemetry Transport) is a lightweight publish-subscribe messaging protocol designed for efficient communi...", "content": "Overview of MQTT API Architecture (Message Queing Telemetry Transport)MQTT (Message Queuing Telemetry Transport) is a lightweight publish-subscribe messaging protocol designed for efficient communication between devices and systems, particularly in scenarios with low bandwidth, high latency, or unreliable networks. While MQTT is not a traditional API architecture style, it is often used as a communication protocol in various IoT (Internet of Things) and real-time messaging architectures. Publisher:A device or application acting as a publisher generates data or events and publishes them to specific MQTT topics. Topics serve as channels through which data is distributed. Broker:The MQTT broker is a central messaging server that manages the communication between publishers and subscribers. It receives published messages and routes them to the appropriate subscribers based on their topic subscriptions. The broker is responsible for maintaining the message queues and ensuring reliable delivery. Subscriber:Subscribers are devices or applications that are interested in receiving messages related to specific topics. They subscribe to topics on the MQTT broker, and the broker forwards published messages to all relevant subscribers. Message Delivery:Messages published by a publisher are delivered to all subscribers that have subscribed to the corresponding topic. Subscribers can process the received messages as needed, which might involve updating data, triggering actions, or sending notifications. Key features of MQTT include: Quality of Service (QoS) Levels: MQTT offers different levels of message delivery assurance, ranging from “at most once” (fire and forget) to “at least once” (guaranteed delivery) and “exactly once” (guaranteed once-only delivery). Retained Messages: Publishers can send retained messages to specific topics, ensuring that new subscribers receive the most recent message published on that topic immediately upon subscription. Last Will and Testament (LWT): Clients can set a “last will” message that the broker will publish if the client unexpectedly disconnects, helping other clients detect the client’s status. Low Overhead: MQTT is designed to be lightweight, making it suitable for resource-constrained devices and networks with limited bandwidth. While MQTT itself is not an API architecture style, it can be used in conjunction with other architectural styles, such as microservices or event-driven architecture, to facilitate real-time communication and data exchange between components or devices. It’s particularly well-suited for scenarios involving IoT devices, sensors, and applications that require efficient and reliable messaging over constrained networks.Some explanations are AI Generated, Proof-read &amp; Verified" }, { "title": "AMQP (Advanced Message Queuing Protocol)", "url": "/overview-amqp-api-architecture/", "categories": "technical", "tags": "API, Architecture, API Architecture, 2023 Top API Architecture, API methodologies, REST, Webhooks, Graphql, SOAP, Websocket, gRPC, MQTT, AMQP, what are API Architectures, API Styles, different types of api architectures, quick revision of apis, Advanced Message Queuing Protocol, interview preperations", "date": "2023-09-04 12:00:00 +0530", "snippet": "An overview of AMQP API architectureAMQP is a messaging protocol that is commonly used for building robust and scalable communication systems, especially in scenarios where reliable and asynchronou...", "content": "An overview of AMQP API architectureAMQP is a messaging protocol that is commonly used for building robust and scalable communication systems, especially in scenarios where reliable and asynchronous messaging between different components or services is crucial. While not a traditional API architecture style like REST or GraphQL, AMQP is an important communication protocol used within various architectural patterns.Message Broker:In an AMQP-based architecture, there is a message broker that acts as an intermediary between message producers (senders) and consumers (receivers). The broker manages the routing, delivery, and persistence of messages.Exchanges and Queues:AMQP introduces the concepts of exchanges and queues. An exchange receives messages from producers and routes them to queues based on predefined routing rules. Queues hold the messages until they are consumed by subscribers.Publish-Subscribe Model:AMQP supports a publish-subscribe model where messages can be published to exchanges, and multiple queues can subscribe to those exchanges. This allows for broadcasting messages to multiple consumers.Message Acknowledgment:AMQP provides mechanisms for message acknowledgment, ensuring that a message is only considered delivered and removed from the queue after the consumer acknowledges its successful processing.Quality of Service (QoS):AMQP offers different levels of QoS to control the reliability of message delivery, including “at most once,” “at least once,” and “exactly once” delivery semantics.Message Routing and Transformation:AMQP supports various routing patterns and message transformations, allowing for flexible and dynamic message handling based on the application’s needs.Integration with Architectural Styles:AMQP can be integrated into different architectural styles, such as microservices, event-driven architecture, and message-driven systems. It enables components to communicate asynchronously and decoupled from each other.AMQP is used to build systems that require reliable and asynchronous messaging, including scenarios like financial transactions, real-time data processing, IoT data streams, and more. It’s worth noting that AMQP is not a replacement for APIs but rather a complementary technology that helps facilitate communication and data exchange between different parts of a distributed system.RabbitMQ is one of the most popular message brokers that implements the AMQP protocol. However, there may be other developments or advancements in this area since then.Some explanations are AI Generated, Proof-read &amp; Verified" }, { "title": "What are HTTP Methods in APIs", "url": "/http-methods/", "categories": "technical", "tags": "API, HTTP Methods, GET, POST, PUT, PATCH, DELETE, methods, http verbs, http request methods, what are HTTP Methods, how api calls, different types of api calls, various http request methods, quick revision of apis, interview preperations", "date": "2023-08-20 12:00:00 +0530", "snippet": "What are HTTP Methods ?HTTP methods (also known as HTTP verbs or HTTP request methods) play a crucial role in designing APIs and web applications because they define how clients (such as browsers o...", "content": "What are HTTP Methods ?HTTP methods (also known as HTTP verbs or HTTP request methods) play a crucial role in designing APIs and web applications because they define how clients (such as browsers or other applications) interact with servers. When you make a request to an API endpoint, you’re typically using one of these methods to perform a specific action on a resource.Understanding these methods is fundamental when working with APIs because APIs expose various functionalities through specific endpoints, and the HTTP methods define what action you’re trying to perform HTTP methods are an essential part of the Hypertext Transfer Protocol (HTTP), which is the foundation of data communication on the World Wide Web. HTTP methods define the types of actions that can be performed on resources (such as documents, images, data) located on web servers. Each method corresponds to a specific action, and APIs (Application Programming Interfaces) often use these methods to perform various operations on resources.The primary HTTP methods are: GET: Retrieves data from the server. It’s used to request resources like web pages, images, etc. POST: Sends data to the server for processing. Commonly used to submit form data, upload files, or create new resources. PUT: Updates or replaces an existing resource on the server with new data. PATCH: Similar to PUT, but it’s used to apply a partial update to a resource, typically for updating specific fields rather than the whole resource. DELETE: Removes a resource from the server. HEAD: Similar to GET, but it only requests the headers of a resource without the actual content. It’s often used to check if a resource has been modified since a certain time. OPTIONS: Retrieves the communication options for the target resource, indicating what methods and headers are allowed. For example: If you’re retrieving data from an API, you would use the GET method. If you’re submitting a new record to a database through an API, you would use the POST method. If you’re updating an existing record, you might use PUT or PATCH. If you’re removing a record, you would use DELETE.By knowing and understanding these HTTP methods, you can effectively communicate with APIs, build applications that interact with remote servers, and design APIs that provide the necessary functionality in a standardized and intuitive way.Some explanations are AI Generated, Proof-read &amp; Verified" }, { "title": "TOP API Architectures in 2023", "url": "/top-api-architecture-in-2023/", "categories": "technical", "tags": "API, Architecture, API Architecture, 2023 Top API Architecture, API methodologies, REST, Webhooks, Graphql, SOAP, Websocket, gRPC, MQTT, AMQP, what are API Architectures, API Styles, different types of api architectures, quick revision of apis, interview preperations", "date": "2023-08-05 12:00:00 +0530", "snippet": "8 Thotaakkal(Bullets) of API Architectures in 20231. REST (Representational State Transfer)REST is a widely used architectural style for designing networked applications. It uses standard HTTP meth...", "content": "8 Thotaakkal(Bullets) of API Architectures in 20231. REST (Representational State Transfer)REST is a widely used architectural style for designing networked applications. It uses standard HTTP methods (GET, POST, PUT, DELETE) and emphasizes stateless communication. Resources are represented as URLs, and the API uses these URLs to interact with the resources. REST APIs are simple and scalable, making them popular for web applications. Read more…2. WebhooksWebhooks are a design pattern used in API architecture to enable real-time communication and data synchronization between different systems or services. Unlike traditional APIs where a client makes requests to a server to retrieve or send data, with webhooks, the server initiates communication by sending data to a predefined endpoint (URL) on the client’s side when a specific event occurs. This allows the client to react and process the data in real-time. Read more…3. GraphQLGraphQL is an alternative to REST that provides more flexibility in data retrieval. Instead of multiple endpoints, GraphQL APIs have a single endpoint that allows clients to request exactly the data they need. This helps reduce over-fetching and under-fetching of data, making APIs more efficient and improving client experience. Read more…4. SOAP (Simple Object Access Protocol)SOAP is a protocol for exchanging structured information in the implementation of web services. It uses XML for message formatting and relies on other protocols such as HTTP, SMTP, and more for message negotiation. SOAP APIs tend to be more rigid and complex compared to REST or GraphQL. Read more…5. WebSocketsWebSocket is a protocol that provides full-duplex communication channels over a single TCP connection. It allows real-time, bidirectional communication between clients and servers, making it suitable for applications that require constant updates or notifications. Read more…6. gRPC (Remote Procedure Call)RPC APIs allow programs to execute functions or procedures on a remote server as if they were local. Examples include gRPC and XML-RPC. gRPC, for instance, uses protocol buffers for data serialization and HTTP/2 for transport, making it efficient and suitable for high-performance applications. And JSON-RPC, which uses JSON. Read more…7. MQTT (Message Queing Telemetry Transport)MQTT (Message Queuing Telemetry Transport) is a lightweight publish-subscribe messaging protocol designed for efficient communication between devices and systems, particularly in scenarios with low bandwidth, high latency, or unreliable networks. While MQTT is not a traditional API architecture style, it is often used as a communication protocol in various IoT (Internet of Things) and real-time messaging architectures. Read More…8. AMQP (Advanced Message Queuing Protocol)AMQP is a messaging protocol that is commonly used for building robust and scalable communication systems, especially in scenarios where reliable and asynchronous messaging between different components or services is crucial. While not a traditional API architecture style like REST or GraphQL, AMQP is an important communication protocol used within various architectural patterns.Read More…Reference from Postman Report 2023Some explanations are AI Generated, Proof-read &amp; Verified" }, { "title": "VS code shortcuts", "url": "/VSCode-shortcuts/", "categories": "technical", "tags": "shortcuts, vscode, ide, quick reference, vs code", "date": "2023-07-07 12:00:00 +0530", "snippet": "VS Code Command Palette - Ctrl + Shift + P Duplicate Line Down/Up - Shift + Alt + Up / Shift + Alt + Down Move Line Down/Up - Alt + Up / Alt + Down Indent / Outdent Line - Ctrl + ] / Ctrl + [ ...", "content": "VS Code Command Palette - Ctrl + Shift + P Duplicate Line Down/Up - Shift + Alt + Up / Shift + Alt + Down Move Line Down/Up - Alt + Up / Alt + Down Indent / Outdent Line - Ctrl + ] / Ctrl + [ Multi-Select Selection - Ctrl + D Multi-Select Cursor - Alt + Click Toggle Line Comment - Ctrl + / Show / Hide Terminal - Ctrl + ` Add Line Comment - Ctrl + K Ctrl + C Toggle Sidebar - Ctrl + B User setting - Ctrl + , Toggle files - Ctrl + Tab Split tab - Ctrl + \\ Close file - Ctrl + W Find and Replace - Ctrl + H Navigating between words - Ctrl + HOME / Ctrl + END Selecting entire word where cursor - Ctrl + D Select the word and multiple cursor - Ctrl + Shift + L Renaming word in multiple places - F2 (alternation option to above) Function definition - Ctrl + click (function name)Zen mode : Ctrl K Z" }, { "title": "Git Basic Commands", "url": "/git-cmd-cheatsheet/", "categories": "technical", "tags": "code, syntax, reference, github, git, git commands, git cmds, git basic, git basic cmds, cheatsheet", "date": "2022-09-15 12:00:00 +0530", "snippet": "ObjectiveArticle aimed at quick glance for all the basic commands for Git Repository!**Recommended to use the Git Bash tool to perform all the git actions. Tool can be downloaded from git-scmGit Co...", "content": "ObjectiveArticle aimed at quick glance for all the basic commands for Git Repository!**Recommended to use the Git Bash tool to perform all the git actions. Tool can be downloaded from git-scmGit ConfigTo setup the git environment in the local for the first time helps faster access to the distributed repository(s) at a system level.1. Configuring the user nameUser has to provide the first name and last name that will be attached to every commits made in the repo. It is not necessary that the user name has to be same with GitHub username or any other repo’s username.git config --global user.name &lt;username&gt;2. Configuring the user identityAllows user to specify the user email. Both user name and user email address are identifying the repositories available in the system and not associated globally or with any distributed repos.git config --global user.email &lt;userid@domain.com&gt;3. Configuring the editorTo set the default editor by the git needs to be configured in the .git. This will allow git to open the editor configured for any further input required. Many editors are available like VS Code, Atom, Vim, Nano, emacs, Sublime. Here the sample is provided for VS Code.git config --global core.editor \"code --wait\"4. To open the config fileAt any point if the configuration needs to be modified, then the following command will be useful to open the config file in the editor configured.git config --global -e5. Configuring the carriage return / new lineTo avoid changing the status of all the files as modified because of automatic EOL conversion done.Windowsgit config --global core.autocrlf trueOS Xgit config --global core.autocrlf input6. Configuring the color modeTo set the default command line coloring for easy differenciationgit config --global color.ui autoWithout the --global flag, all the git configs will be applied to the specific repository only.Git Online RepoTo start with the existing code base from the online repository say GitHub, the repo needs to be pulled to the local base. Following commands will help start the process.1. Git Repo URLTo fetch or to connect to the repo available online, first the repository needs to be cloned to the local system. Steps to be followed as below: Login to GitHub and goto the repository\\2. Git CloneUsing the url obtained as mentioned in previous step, clone the repo using the following cmd.git clone https://&lt;giturl&gt;3. Git File ListTo see the list of files in the directory cloned and to confirm / verify the number the files using the cmd.ls4. Git PullOn demand if the online repository is been updated by the fellow team and in order to fetch the recent changes in the online directory and merge the changes to the local use this cmd.git pull git pull is a combination of git fetch - which only fetches the changes and stores in the refs/remotes/ in .git folder. git merge - updates the changes in the local repository5. Git ViewTo view the content inside the filecat &lt;test.txt&gt;Git FlowNow we will see how the code flow happens using the git commands. Starting from the scratch how the life cycle begins and how it continues to the online repos.1. Git InitializeOnce you created a folder for a new application, the folder needs to be initialized as a git repository. Following cmd will initialize the folder as local git repo.git initOnce initialized, a .git folder will be created. In this folder all the changes made to the code files are tracked with version history and the commit history. Also when this folder is synced online repo, all the information related to the repo name, url, branch name, number of branches, last modified version are all captured.2. Git File AdditionNow the file(s) is created in the git initialized folder as part of the code function, say creating a simple web page with index.html and corresponding styles added to page in the style.css file. These files are tracked by the git but not added by default. To add the file to the staging area use the following cmd.Add single filegit add index.htmlAdd multiple files usinggit add .orgit add -all3. Git File Status CheckBefore committing the changes, the file will added to the staging area. To show the modified files usegit status4. Git File Stage DifferencesBut in time when the number of files increases it will be pretty difficult to track which file is added to staging and which are not. To check the status of the files in the folder will allow us to see the differentiation in not stagged files usegit diffTo show all the stagged files but not committed usegit diff --staged5. Git File CommitsOnce the changes are ready to be uploaded to make it a version, the file or file set can be committed with the commit description by identifying with the flag -m for message. The cmd used as follows.git commit -m \"&lt;commit description on the change done&gt;\"6. Git RemoteTo view the list of remote repos available / configured with url, use the following cmdgit remote -vTo add a new remote location, add a name for the remote location which will used in future references and map the urlgit remote add &lt;name&gt; &lt;URL&gt;To rename and remove the remote location added, use the following cmdgit remote rename &lt;oldName&gt; &lt;newName&gt;git remote remove &lt;name&gt;7. Git PublishTo publish the committed version of the files to online repository, use the following cmd. While pushing the files from local to remote online provide the remote name and remote branch. Also if upstream (tracking) reference to be added, include the flag -u in the cmd as follows.git push &lt;origin&gt; &lt;main&gt;git push -u &lt;origin&gt; &lt;main&gt;To delete a branch in the online repository usegit push &lt;name&gt; --delete &lt;branchName&gt;AdditionallyApart from the flow, few additional commands that are useful1. BranchingTo list all the branches available usegit branch* denotes the branch which is connected presentlyTo create a new branchgit branch &lt;branchName&gt;To rename the branchgit branch -m &lt;oldName&gt; &lt;newName&gt;To delete a branch in the local repository use the flag -d and to delete forcefully use -Dgit branch -d &lt;branchName&gt;In order to change the connected branch to a new branch usegit checkout &lt;newBranchName&gt;To create a new branch and switch the newly created branch usegit checkout -b &lt;branchName&gt;To show the commit history in current branchgit logTo show the difference available in branchOld and not in branchNewgit diff branchNew...branchOld2. Misc.To delete the file from the folder and stage the removal changes usegit rm &lt;filename&gt;To move the existing file path to a new path and stage the changes usegit mv &lt;existingPath&gt; &lt;newPath&gt;To apply the commits of the current branch ahead of any others usegit rebase &lt;commit&gt;To clear the stagging area and start working from the tree of the specified commit id usegit reset --hard &lt;commit&gt;If you are juggling between branches and wanted to save all the modified files temporarily in the stagged area usegit stashTo discard all the temporary changes stagged usegit stash dropTo move a commit from one branch to anothergit cherry-pick &lt;commit&gt;" }, { "title": "Markdown Quick Syntax", "url": "/markdown-quick-syntax/", "categories": "technical", "tags": "code, syntax, reference, markdown, cheatsheet", "date": "2022-09-07 12:00:00 +0530", "snippet": "Cheat Sheet for MarkdownObjectiveArticle aimed at quick glance for all the code syntax or act as a reference point for Markdown language!Heading# for Heading 1, ## for Heading 2, .. ###### for Head...", "content": "Cheat Sheet for MarkdownObjectiveArticle aimed at quick glance for all the code syntax or act as a reference point for Markdown language!Heading# for Heading 1, ## for Heading 2, .. ###### for Heading 6== for Heading 1, – for Heading 2Example: Heading == HeadingParagraphBlank line added before and after a paragraph Example:Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.Text Styling BoldAdd 2 ** before and after the word / character ItalicsAdd 1 * before and after the word / character Bold &amp; ItalicsAdd 3 *** before and after the word / characterNew LineAdd a \\ before and after a paragraph to insert line gapExample:line 1 with \\\\line 2line 1 with \\line 2line 1 without \\line 2 will fall in same lineLine BreaksCreating line breaks before paragraph using \\Example:\\Lorem Ipsum is simply dummy text of the printing and typesetting industry. Output for line break startLorem Ipsum is simply dummy text of the printing and typesetting industry. Output for line break endHorizontal rulesAdd any of these symbol after a empty line *** or --- or ___ after rulerListThere are two types of listOrdered listsAdd numbers in any order with a number, a dot and a space 1. Example:1. item one1. item two list one list two Unordered listsAdd any of the following symbol - or + or *Example:- list item 1 - sub list item 1+ list item 2* list item 3 list item 1 sub list item 1 list item 2 list item 3 TableAdd a pipe symbol before the start and end | heading |Example: | Header 1 | Header 2 | | ----------- | ---------- | | data row 1 | data row 1 | | data row 2 | data row 2 | Header 1 Header 2 data row 1 data row 1 data row 2 data row 2 ImagesTo add images add an ! follwed by box brackets and image location hyperlink within parenthesis.Example:![alt text](image.jpg)BlockquotesTo create a new blockquote add this symbol &gt; on new line on first column1. Nested blockquotes Add the same symbol twice `&gt;&gt;` to create a nested block blocked quote nested blockquote 2. Code blocks An indent with 4 spaces or 1 tab creates a code block tab / indented3. Fenced Code blocks Adding 3 ``` (backticks) or 3 `~~~` will create a fenced code blocks Example: ``` { \"firstname\":\"John\", \"lastname\":\"Doe\" } ```{ \"firstname\":\"John\", \"lastname\":\"Doe\"}4. Formating Code block languages Adding 3 ``` with language name will create a language formating Example: ```json { \"firstname\":\"John\", \"lastname\":\"Doe\" } ```{ \"firstname\":\"John\", \"lastname\":\"Doe\"}LinksTypes of links1. Titles Put the text in box brackets immediately followed by url within parenthesis To add onhover text, add a space and the description within double quotes next to hyperlink url Example: [Google](https://www.google.com) [Google](https://www.google.com \"search engine for all needs\") Google2. URL To display URL add the hyperlink within the arrow brackets Example: &lt;https://www.google.com&gt; https://www.google.com3. Reference To create reference links for any text or paragraph, add numbers within box brackets and after a line gap create hyperlink url reference to the numbers added above. Example: [Google Wiki][1] [1]: https://en.wikipedia.org/wiki/Google Google-Wiki4. Email To create a mailto hyperlink, add the email within arrow brackets Example: &lt;author@domain.com&gt; author@domain.com5. Images As we know adding `!` immediately followed by box brackets with text acting as ALT TEXT and image url within parenthesis Optionally description can be added for image onhover This image set in box brackets immediately followed by hyperlink url within parenthesis makes the image hyperlinked Example: ![alt-text](image.jpeg) ![alt-text](image.jpeg \"image description\") [![alt-text](image.jpeg \"image description\")](https://www.google.com)Additional Syntax1. Footnote Adding `^` to the reference link creates the foot note Example: Sample footnote created.[^1] [^1]: This is the footnote Sample footnote created.12. Strikethrough Adding 2 ~~ will create a strikethrough Example: This will ~~strikethrough~~ the word inbetween This will strikethrough the word inbetween3. Highlight To highlight a word or sentence, double equal `==` between the word or if application supports then add html supported tag &lt;mark&gt; Example: In this line, this word ==highlight== will be highlighted. In this line, this word &lt;mark&gt;highlight&lt;/mark&gt; will be highlighted. In this line, this word highlight will be highlighted.4. Subscript To create subscript, Single tilde `~` between the word or if application supports then add the tag &lt;sub&gt; between the word Example: H~2~O H&lt;sub&gt;2&lt;/sub&gt;O H2O5. Superscript Single backtick `^` between the word or if application supports then add the html supported tag &lt;sup&gt; Example: X^2^ X&lt;sup&gt;2&lt;/sup&gt; X2Escaping charactersAll the above character literals used can be escaped using the \\\\ Example:* Conditions Apply but output renders as bullet point Conditions Apply to this escape this, add the backslash * Conditions ApplyDifferent characters that can be escaped are\\ ` * _ { } [ ] &lt; &gt; ( ) # + - . ! | This is the footnote &#8617; " }, { "title": "Hello World", "url": "/hello-world/", "categories": "new", "tags": "jekyll, cms", "date": "2022-08-05 12:00:00 +0530", "snippet": "WelcomeHello world, welcome to my new website!Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s...", "content": "WelcomeHello world, welcome to my new website!Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Why do we use it?It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using ‘Content here, content here’, making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for ‘lorem ipsum’ will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).✔ One✔ TwoCoffeeTeaMilkconsole.log('hello world');on: push: branches: - mastersudo apt update &amp;&amp; sudo apt upgradePhotos My Photo" } ]
